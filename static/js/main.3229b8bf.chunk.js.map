{"version":3,"sources":["core/config.ts","core/ConfigContext.tsx","component/Field.tsx","component/SettingsPanel.tsx","component/StartPage/StartPage.tsx","App.tsx","index.tsx"],"names":["Direction","Game","_startPosition","_finishPosition","_path","_currentStep","COUNT_FIELDS","COUNT_STEPS","splitNumber","number","row","Math","floor","column","generate","currentPosition","i","step","getStep","UP","DOWN","RIGHT","push","position","randomInt","LEFT","start","next","this","ConfigContext","React","createContext","ProviderConfigContext","children","useState","setCOUNT_FIELDS","setCOUNT_STEPS","FIELD_SIZE","useMemo","minWindowSize","window","innerWidth","innerHeight","value","Provider","useConfigContext","useContext","Field","styled","div","props","color","MapFieldsComponent","MapFields","MapDirectionComponent","MapDirection","ItemInnerFieldComponent","left","top","ItemInnerField","grip","FieldMap","FieldDirection","Panel","show","Toggle","Button","button","Input","input","SettingsPanel","win","count","restart","setShow","countFields","setCountFields","countSteps","setCountSteps","type","onChange","e","target","max","min","onClick","StatusGame","Title","h1","Main","Icon","direction","StartPage","game","useRef","current","steps","setSteps","enabledField","setEnabledField","UNDEFINED","statusGame","setStatusGame","selectNumber","setSelectNumber","showPanel","setShowPanel","setWin","games","setGames","useEffect","setTimeout","getNextStep","handleFinish","console","log","finish","WIN","LOSE","Array","fill","map","item","index","startPosition","App","setStart","className","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3229b8bf.chunk.js","sourcesContent":["import randomInt from 'random-int';\n\nexport const STEP_SIZE = 30;\n\nexport enum Direction {\n  UP,\n  DOWN,\n  LEFT,\n  RIGHT,\n}\n\nexport class Game {\n  private _startPosition: number = 0;\n  private _finishPosition: number = -1;\n  private _path: Direction[] = [];\n  private _currentStep: number = 0;\n  private COUNT_FIELDS: number = 3;\n  private COUNT_STEPS: number = 10;\n\n  constructor() {\n    this.start(this.COUNT_FIELDS, this.COUNT_STEPS);\n  }\n\n  private splitNumber = (number: number) => {\n    const row = Math.floor(number / this.COUNT_FIELDS);\n    const column = number % this.COUNT_FIELDS;\n    return {\n      row,\n      column,\n    };\n  };\n\n  private generate = () => {\n    const currentPosition = this.splitNumber(this._startPosition);\n    for (let i = 0; i < this.COUNT_STEPS; i++) {\n      const step = this.getStep(currentPosition);\n\n      if (step === Direction.UP) currentPosition.row--;\n      else if (step === Direction.DOWN) currentPosition.row++;\n      else if (step === Direction.RIGHT) currentPosition.column++;\n      else currentPosition.column--;\n\n      this._path.push(step);\n    }\n\n    this._finishPosition =\n      currentPosition.row * this.COUNT_FIELDS + currentPosition.column;\n  };\n\n  private getStep = (position: { column: number; row: number }) => {\n    const step = randomInt(0, 3);\n\n    if (step === Direction.UP) {\n      return position.row - 1 < 0 ? Direction.DOWN : Direction.UP;\n    } else if (step === Direction.DOWN) {\n      return position.row + 1 >= this.COUNT_FIELDS\n        ? Direction.UP\n        : Direction.DOWN;\n    } else if (step === Direction.LEFT) {\n      return position.column - 1 < 0 ? Direction.RIGHT : Direction.LEFT;\n    } else {\n      return position.column + 1 >= this.COUNT_FIELDS\n        ? Direction.LEFT\n        : Direction.RIGHT;\n    }\n  };\n\n  start = (COUNT_FIELDS: number, COUNT_STEPS: number) => {\n    this.COUNT_FIELDS = COUNT_FIELDS;\n    this.COUNT_STEPS = COUNT_STEPS;\n\n    this._finishPosition = -1;\n    this._path = [];\n    this._currentStep = 0;\n    this._startPosition = randomInt(\n      0,\n      this.COUNT_FIELDS * this.COUNT_FIELDS - 1,\n    );\n    this.generate();\n  };\n\n  get finish() {\n    return this._finishPosition;\n  }\n\n  get startPosition() {\n    return this._startPosition;\n  }\n\n  next = () => {\n    if (this._currentStep === this.COUNT_STEPS) return null;\n    return this._path[this._currentStep++];\n  };\n}\n","import React, { useContext, useMemo, useState } from 'react';\n\nexport const ConfigContext = React.createContext({\n  COUNT_STEPS: 10,\n  COUNT_FIELDS: 3,\n});\n\nexport const ProviderConfigContext = ({ children }: any) => {\n  const [COUNT_FIELDS, setCOUNT_FIELDS] = useState(3);\n  const [COUNT_STEPS, setCOUNT_STEPS] = useState(10);\n\n  const FIELD_SIZE = useMemo(() => {\n    const minWindowSize =\n      window.innerWidth < window.innerHeight\n        ? window.innerWidth\n        : window.innerHeight;\n\n    if (minWindowSize > 600) return (minWindowSize - 360) / COUNT_FIELDS;\n    else return minWindowSize / COUNT_FIELDS;\n  }, [COUNT_FIELDS]);\n\n  const value = useMemo(\n    () => ({\n      COUNT_FIELDS,\n      setCOUNT_FIELDS,\n      COUNT_STEPS,\n      setCOUNT_STEPS,\n      FIELD_SIZE,\n    }),\n    [COUNT_STEPS, COUNT_FIELDS],\n  );\n\n  return (\n    <ConfigContext.Provider value={value}>{children}</ConfigContext.Provider>\n  );\n};\n\nexport const useConfigContext = () => {\n  const {\n    COUNT_FIELDS,\n    setCOUNT_FIELDS,\n    COUNT_STEPS,\n    setCOUNT_STEPS,\n    FIELD_SIZE,\n  }: any = useContext(ConfigContext);\n\n  const splitNumber = (number: number) => {\n    const row = Math.floor(number / COUNT_FIELDS);\n    const column = number % COUNT_FIELDS;\n    return {\n      row,\n      column,\n    };\n  };\n\n  return {\n    COUNT_FIELDS,\n    setCOUNT_FIELDS,\n    COUNT_STEPS,\n    setCOUNT_STEPS,\n    FIELD_SIZE,\n    splitNumber,\n  };\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport { STEP_SIZE } from '../core/config';\nimport { useConfigContext } from '../core/ConfigContext';\n\nconst Field = styled.div`\n  border-radius: 5px;\n  background-color: ${props => props.color};\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n`;\n\nconst MapFieldsComponent: any = styled.div`\n  position: relative;\n  display: grid;\n  grid-template-columns: repeat(\n    ${(props: any) => props.COUNT_FIELDS},\n    ${(props: any) => props.FIELD_SIZE}px\n  );\n  grid-template-rows: repeat(\n    ${(props: any) => props.COUNT_FIELDS},\n    ${(props: any) => props.FIELD_SIZE}px\n  );\n  grid-gap: ${(props: any) => 24 / props.COUNT_FIELDS}px;\n  margin-bottom: 16px;\n`;\n\nexport const MapFields = (props: any) => {\n  const { COUNT_FIELDS, FIELD_SIZE } = useConfigContext();\n\n  return <MapFieldsComponent {...{ COUNT_FIELDS, FIELD_SIZE }} {...props} />;\n};\n\nconst MapDirectionComponent: any = styled.div`\n  display: grid;\n  grid-template-columns: repeat(\n    ${(props: any) => props.COUNT_STEPS / 2},\n    ${STEP_SIZE}px\n  );\n  grid-template-rows: repeat(2, ${STEP_SIZE}px);\n  grid-gap: ${(props: any) => 48 / props.COUNT_STEPS}px;\n`;\n\nexport const MapDirection = (props: any) => {\n  const { COUNT_STEPS } = useConfigContext();\n  return <MapDirectionComponent {...{ COUNT_STEPS }} {...props} />;\n};\n\nconst ItemInnerFieldComponent: any = styled(Field)`\n  position: absolute;\n  margin: 0;\n  width: ${(props: any) => props.FIELD_SIZE}px;\n  height: ${(props: any) => props.FIELD_SIZE}px;\n  left: ${({ left }: any) => left}px;\n  top: ${({ top }: any) => top}px;\n  svg {\n    height: ${(props: any) => props.FIELD_SIZE / 2}px;\n    width: ${(props: any) => props.FIELD_SIZE / 2}px;\n  }\n`;\n\nexport const ItemInnerField = (props: any) => {\n  const { FIELD_SIZE, splitNumber, COUNT_FIELDS } = useConfigContext();\n  const { row, column } = splitNumber(props.number);\n  const grip = 24 / COUNT_FIELDS;\n  const left = column * FIELD_SIZE + grip * column;\n  const top = row * FIELD_SIZE + grip * row;\n\n  return <ItemInnerFieldComponent {...{ FIELD_SIZE, left, top }} {...props} />;\n};\n\nexport const FieldMap = styled(Field)`\n  border: 1px solid #0000002e;\n`;\nexport const FieldDirection = styled(Field)`\n  border: 1px dashed black;\n  cursor: pointer;\n`;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { IoMdArrowDropleft, IoMdArrowDropright } from 'react-icons/all';\nimport { useConfigContext } from '../core/ConfigContext';\n\nconst Panel: any = styled.div`\n  border: 1px solid black;\n  position: absolute;\n  right: -1px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  transform: translateX(${({ show }: any) => (show ? '0' : '100%')});\n  padding: 8px 16px;\n  transition: transform 300ms;\n`;\n\nconst Toggle = styled.div`\n  position: absolute;\n  width: 20px;\n  height: calc(100% + 2px);\n  background-color: black;\n  top: -1px;\n  left: 0;\n  transform: translateX(-100%);\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  svg {\n    fill: white;\n  }\n`;\n\nconst Button = styled.button`\n  border: 1px solid black;\n  border-radius: 3px;\n  padding: 4px 8px;\n  cursor: pointer;\n`;\n\nconst Input = styled.input`\n  font-size: 1rem;\n  border: 1px solid black;\n  margin-bottom: 8px;\n  padding: 2px 8px;\n`;\n\ninterface ISettingsPanelProps {\n  win: number;\n  count: number;\n  restart: any;\n  show: boolean;\n  setShow: any;\n}\n\nconst SettingsPanel = ({\n  win,\n  count,\n  restart,\n  show,\n  setShow,\n}: ISettingsPanelProps) => {\n  const { COUNT_FIELDS, COUNT_STEPS } = useConfigContext();\n  const [countFields, setCountFields] = useState(COUNT_FIELDS);\n  const [countSteps, setCountSteps] = useState(COUNT_STEPS);\n\n  const handleChangeCountFields = (e: any) => {\n    setCountFields(+e.target.value);\n  };\n\n  const handleChangeCountSteps = (e: any) => {\n    setCountSteps(+e.target.value);\n  };\n\n  return (\n    <Panel show={show}>\n      <p>\n        {win} / {count}\n      </p>\n      <Input\n        type={'number'}\n        value={countFields}\n        onChange={handleChangeCountFields}\n        max={18}\n        min={3}\n      />\n      <Input\n        type={'number'}\n        step={2}\n        value={countSteps}\n        onChange={handleChangeCountSteps}\n        min={10}\n        max={30}\n      />\n      <Button onClick={() => restart(countFields, countSteps)}>Restart</Button>\n      <Toggle onClick={setShow}>\n        {show ? <IoMdArrowDropright /> : <IoMdArrowDropleft />}\n      </Toggle>\n    </Panel>\n  );\n};\n\nexport default SettingsPanel;\n","import React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport {\n  FaRegArrowAltCircleDown,\n  FaRegArrowAltCircleLeft,\n  FaRegArrowAltCircleRight,\n  FaRegArrowAltCircleUp,\n  FaMapMarkerAlt,\n  FaAward,\n} from 'react-icons/fa';\nimport {\n  FieldDirection,\n  FieldMap,\n  ItemInnerField,\n  MapDirection,\n  MapFields,\n} from '../Field';\nimport { Direction, Game } from '../../core/config';\nimport { AiFillDislike, AiFillLike } from 'react-icons/all';\nimport SettingsPanel from '../SettingsPanel';\nimport { useConfigContext } from '../../core/ConfigContext';\n\nconst Title = styled.h1`\n  color: black;\n  text-align: center;\n  padding: 0 16px;\n  align-self: center;\n`;\n\nconst Main = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nenum StatusGame {\n  WIN,\n  LOSE,\n  UNDEFINED,\n}\n\nconst Icon = (props: any) => {\n  const { direction } = props;\n  if (direction === Direction.UP) return <FaRegArrowAltCircleUp />;\n  else if (direction === Direction.DOWN) return <FaRegArrowAltCircleDown />;\n  else if (direction === Direction.LEFT) return <FaRegArrowAltCircleLeft />;\n  else return <FaRegArrowAltCircleRight />;\n};\n\nconst StartPage = () => {\n  const {\n    COUNT_STEPS,\n    COUNT_FIELDS,\n    setCOUNT_FIELDS,\n    setCOUNT_STEPS,\n  } = useConfigContext();\n  const game = useRef(new Game()).current;\n  const [steps, setSteps] = useState([] as Direction[]);\n  const [enabledField, setEnabledField] = useState(false);\n  const [statusGame, setStatusGame] = useState(StatusGame.UNDEFINED);\n  const [selectNumber, setSelectNumber] = useState(-1);\n  const [showPanel, setShowPanel] = useState(false);\n  const [win, setWin] = useState(0);\n  const [games, setGames] = useState(0);\n\n  useEffect(() => {\n    const getNextStep = () => {\n      const step = game.next();\n\n      if (step !== null) {\n        steps.push(step);\n        setSteps([...steps]);\n      } else {\n        setEnabledField(true);\n      }\n    };\n    setTimeout(() => getNextStep(), 100);\n  }, [game, steps]);\n\n  const handleFinish = (number: number) => {\n    console.log(number);\n    if (!enabledField || statusGame !== StatusGame.UNDEFINED) return;\n\n    if (game.finish === number) {\n      setStatusGame(StatusGame.WIN);\n      setWin(win => win + 1);\n    } else {\n      setStatusGame(StatusGame.LOSE);\n      setGames(count => count + 1);\n    }\n    setSelectNumber(number);\n    setShowPanel(true);\n  };\n\n  const handleRestart = (countFields: number, countSteps: number) => {\n    if (statusGame === StatusGame.UNDEFINED) return;\n\n    setCOUNT_STEPS(countSteps);\n    setCOUNT_FIELDS(countFields);\n\n    setSteps([]);\n    setStatusGame(StatusGame.UNDEFINED);\n    setEnabledField(false);\n    setSelectNumber(-1);\n    game.start(countFields, countSteps);\n  };\n\n  return (\n    <Main>\n      <Title>Лабиринт</Title>\n      <SettingsPanel\n        win={win}\n        count={games}\n        restart={handleRestart}\n        show={showPanel}\n        setShow={() => setShowPanel(show => !show)}\n      />\n      <MapFields>\n        {Array(COUNT_FIELDS * COUNT_FIELDS)\n          .fill('')\n          .map((item, index) => {\n            return <FieldMap onClick={() => handleFinish(index)} />;\n          })}\n        {statusGame === StatusGame.UNDEFINED && (\n          <ItemInnerField\n            number={game.startPosition}\n            onClick={() => handleFinish(game.startPosition)}\n          >\n            <FaMapMarkerAlt />\n          </ItemInnerField>\n        )}\n        {statusGame === StatusGame.WIN && (\n          <ItemInnerField number={selectNumber}>\n            <FaAward />\n          </ItemInnerField>\n        )}\n        {statusGame === StatusGame.LOSE && (\n          <>\n            <ItemInnerField number={game.finish}>\n              <AiFillLike />\n            </ItemInnerField>\n            <ItemInnerField number={selectNumber}>\n              <AiFillDislike />\n            </ItemInnerField>\n          </>\n        )}\n      </MapFields>\n      <MapDirection>\n        {steps.map((item, index) => {\n          return (\n            <FieldDirection>\n              <Icon direction={item} />\n            </FieldDirection>\n          );\n        })}\n      </MapDirection>\n    </Main>\n  );\n};\n\nexport default StartPage;\n","import React, { useState } from 'react';\nimport StartPage from './component/StartPage/StartPage';\nimport { ProviderConfigContext } from './core/ConfigContext';\n\nconst App: React.FC = () => {\n  const [start, setStart] = useState(true);\n\n  return (\n    <ProviderConfigContext>\n      <div className=\"App\">\n        {start ? (\n          <StartPage />\n        ) : (\n          <button onClick={() => setStart(false)}>Start</button>\n        )}\n      </div>\n    </ProviderConfigContext>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}